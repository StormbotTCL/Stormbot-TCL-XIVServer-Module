# Final Fantasy XIV Server Status
#
# Author: Demonicpagan
# Created: 8/19/2013
# Last Updated: 1/03/2014
#
# Description: Poll the Lodestone for the current server status
# For a visual check please visit the website I modelled this after: http://arrstatus.com/
# Change Log:
# Please refer to http://github.com/demonicpagan/Stormbot-TCL-XIVServer-Module for changes made

SB:command add XIVSTATUS 1 -none 14 XIV
SB:abbr add XIVSTATUS 14 14SERVER 14STATUS
SB:register variable global XIVSTATUS:*
sbd:set xivstatus:author "Dustin Lennon (demonicpagan@gmail.com)"

namespace eval frontier {
	variable gateway_status_url "http://frontier.ffxiv.com/worldStatus/gate_status.json"
	variable current_status_url "http://frontier.ffxiv.com/worldStatus/current_status.json"
	variable server_address_url "http://ffxiv.stelth2000inc.com/worldStatus/server_address.json"

	# timeout for http requests (ms)
	variable timeout 60000
}

proc frontier:query {url} {
	set token [http::geturl $url -timeout $frontier::timeout]
	set data [http::data $token]
	set ncode [http::ncode $token]
	http::cleanup $token

	return $data
}

proc SB:proc_xivstatus {nick host handle chan arg} {
	SB:setvariables

	# Help information
	if [string eq -nocase HELP $1] {
		printh $nick "\002\037XIV SERVER STATUS:\037\002"
		printh $nick "Syntax: $::botnick XIVSTATUS <LOBBY|SERVER NAME> - Check the status of the lobby or server of interest"
		printh $nick "Syntax: $::botnick XIVSTATUS <EUROPE|NALEGACY|JPLEGACY|EULEGACY|JAPAN|NA> - List the status of group of servers"
		if {![string match -nocase *CYGWIN* $::tcl_platform(os)] || ![string match -nocase WINDOWS* $::tcl_platform(os)]} {
			printh $nick "Syntax: $::botnick XIVSTATUS PING <SERVER NAME> - Get a ping response from the box this eggdrop is running on and the selected FFXIV server"
		}
		printh $nick ""
		return 0
	}

	if ![sbd:nozero @XIVSTATUS:PACKAGES_CHECKED] {
		lassign [xivstatus:check_packages] a b
		if [notempty b] { printh $nick "\[XIVSTATUS\] Unable to run command (missing packages): [ajl $b]" ; return 0 }
	}

	set result [xivstatus:getdata $frontier::current_status_url]
	empty server status

	foreach {i j} $result {
		lappend server $i
		lappend status $j
	}

	if {[lsearch -nocase $server $1] != -1} {
		set req [sts $1]

		if [string eq -nocase $req $1] {
			set pos [lsearch -index 0 $server $req]
			set info [lindex $status $pos]

			switch -exact -- $info {
				0 - 3 { set msg "[color 4]Down[color]" }
				2 { set msg "[color 7]Partially Down[color]" }
				1 { set msg "[color 3]Up[color]" }
				default { set msg "[color 4]Unknown[color]" }
			}

			print $nick "The $req server is currently $msg"
			return 0
		}
	}

	switch -exact -- $l1 {
		test {
			print $nick "\[${u0}\] Testing functions needed for $u0 to work:"
			lassign [xivstatus:check_packages] ok bad
			if [isempty bad] {
				print $nick "\[${u0}\] All packages are available: [ajl $ok]"
			} {
				print $nick "\[${u0}\] Missing packages: [ajl $bad] ($u0 can't function without them!)"
			}
			if {[string match -nocase *CYGWIN* $::tcl_platform(os)] || [string match -nocase WINDOWS* $::tcl_platform(os)]} {
				print $nick "[color 5]This eggdrop is running under a CYGWIN or WINDOWS environment and thus the PING option will not be available to you.[color]"
			}
			return 0
		}

		ping {
			if {[string match -nocase *CYGWIN* $::tcl_platform(os)] || [string match -nocase WINDOWS* $::tcl_platform(os)]} {
				print $nick "This command is unavailable to you since you are running your eggdrop under a CYGWIN or WINDOWS environment."
				return 0
			} else {
				if {[catch {xivstatus:getdata $frontier::server_address_url} result]} {
					print $nick "Unable to retrieve information - $result"
					return 0
				}

				empty server ips

				foreach {i j} $result {
					lappend server $i
					lappend ips $j
				}

				if {[lsearch -nocase $server $2] != -1} {
					set req [sts $2]

					if [string eq -nocase $req $2] {
						set pos [lsearch -index 0 -nocase $server $req]
						set ip [lindex $ips $pos]

						if {[catch {xivstatus:ping_check $ip} result]} {
							print $nick "There was an issue running the PING command - $result"
							return 0
						}
					}
				}

				switch -glob -- $2 {
					na - NA {
						print $nick "The NA Lobby server returned a PING result of $result"
						return 0
					}

					jp - JP {
						print $nick "The JP Lobby server returned a PING result of $result"
						return 0
					}

					default {
						print $nick "$req has returned a PING result of $result"
					}
				}
			}

			return 0
		}

		lobby {
			if {[catch {xivstatus:getdata $frontier::gateway_status_url} result]} {
				print $nick "Unable to retieve information - $result"
				return 0
			}

			set lobby [dict get $result status]
			switch -exact -- $lobby {
				0 - 3 { print $nick "The lobby is currently [color 4]down[color]. Please check back later."; return 0}
				2 { print $nick "The lobby is currently [color 7]partially down[color]. You might be able to log in."; return 0}
				1 { print $nick "The lobby is currently [color 3]up[color]. Log in and enjoy playing!"; return 0}
			}

			return 0
		}
	}

	# Default fall-through: server status checks
	switch -exact -- $l1 {
		lobby { set list [list status] }

		elemental { set list [list Aegis Atomos Carbuncle Garuda Gungnir Kujata Ramuh Tonberry Typhon Unicorn] }
		gaia { set list [list Alexander Bahamut Durandal Fenrir Ifrit Ridill Tiamat Ultima Valefor Yojimbo Zeromus] }
		mana { set list [list Anima Asura Belias Chocobo Hades Ixion Mandragora Masamune Pandaemonium Shinryu Titan] }
		aether { set list [list Adamantoise Balmung Cactuar Coeurl Faerie Gilgamesh Goblin Jenova Mateus Midgardsormr Sargatanas Siren Zalera] }
		primal { set list [list Behemoth Brynhildr Diabolos Excalibur Exodus Famfrit Hyperion Lamia Leviathan Malboro Ultros] }
		choas { set list [list Cerberus Lich Moogle Odin Phoenix Ragnarok Shiva Zodiark] }

		eu - europe { set list [list Cerberus Moogle Odin Phoenix Shiva Lich Zodiark] }
		eul - eulegacy - europelegacy { set list [list Ragnarok] }
		jp - japan { set list [list Alexander Anima Atomos Asura Bahamut Belias Carbuncle Chocobo Fenrir Garuda Hades Ifrit Ixion Kujata Mandragora Ramuh Tiamat Titan Tonberry Typhon Ultima Unicorn Valefor Pandaemonium Yojimbo Zeromus Shinryu] }
		jpl - jalegacy - japanlegacy { set list [list Aegis Durandal Gungnir Masamune Ridill] }
		na  { set list [list Adamantoise Behemoth Cactuar Coeurl Diabolos Exodus Faerie Gilgamesh Goblin Lamia Leviathan Malboro Midgardsormr Siren Ultros Famfrit Brynhildr Mateus Zalera Jenova] }
		nal - nalegacy { set list [list Balmung Excalibur Hyperion Sargatanas] }

		default { printh $nick "\[${u0}\] Unknown server group: $u1" ; return 0 }
	}

	if {[catch {xivstatus:getdata $frontier::current_status_url} result]} {
		print $nick "Unable to retieve information - $result"
		return 0
	}

	empty final
	set server [list $result]
	foreach value $server {
		foreach esper $list {
			set serv_status [dict get $value $esper]

			switch -exact -- $serv_status {
				0 - 3 { set text "[color 4]Down[color]" }
				2 { set text "[color 7]Partially Down[color]" }
				1 { set text "[color 3]Up[color]" }
				default { set text "[color 4]Unknown[color]" }
			}
			lappend final "$esper (${text})"
		}
	}
	print $nick "\002$u1 Server Status\002"
	array set final_status [list]
	foreach b $final { lassign $b c d; set d [mid $d 2 -1]; lappend final_status($d) $c }
	foreach e [array names final_status] { print $nick "[stu $e]: [ajl $final_status($e)]" }
	return 0

}

proc xivstatus:getdata {url} {
	set data [frontier:query $url]
	return [json::json2dict $data]
}

proc xivstatus:check_packages args {
	# Make sure the require packages are installed
	empty ok bad
	foreach a [list json http] {
		set error [ catch { package require $a } ]
		if $error { lappend bad $a } { lappend ok $a }
	}
	return [list $ok $bad]
}

proc xivstatus:ping_check {ip} {
	set ping [split [exec ping -c 1 $ip] \n]
	regexp -nocase -- {time=([\d\.]+ [\w]+)} $ping - time
	return $time
}